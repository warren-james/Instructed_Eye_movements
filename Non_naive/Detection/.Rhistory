# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas <- (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (106 * 0.25)
elec <- ((elec_current - elec_previous) * 0.1586) + (106 * 0.18)
total_cost = gas + elec
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 2
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
total_owed
total_owed/4
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 3
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
97*10^6 * 15
97*10^6 * 10
97*10^6
97*10^5
library(tidyverse)
library(rethinking)
data(Howell1)
d <- Howell1
# then tidy and load in brms
rm(Howell1)
detach(package::rethinking, unload = T)
detach(package:rethinking, unload = T)
;ibrary(brms)
library(brms)
d %>%
str()
d2 <- d %>%
filter(age >= 18)
ggplot(data = tibble(x = seq(from = 100, to = 250, by = .1)),
aes(x = x, y = dnorm(x, mean = 178, ds = 20))) +
geom_line() +
ylab("density")
ggplot(data = tibble(x = seq(from = 100, to = 250, by = .1)),
aes(x = x, y = dnorm(x, mean = 178, sd = 20))) +
geom_line() +
ylab("density")
tibble(x = seq(from = -10, to = 60, by = 1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 50))) +
geom_line() +
scale_y_continuous(NULL, breaks = NULL) +
theme(panel.grid = element_blank())
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
tibble(x = rnorm(1e4, sample_mu, sample_sigma)) %>%
ggplot(aes(x = x)) +
geom_density(fill = "black", size = 0) +
scale_y_continuous(NULL, breaks = NULL) +
theme(panel.grid = element_blank())
ggplot(data = d2,
aes(x = weight, y = height)) +
theme_bw() +
geom_point(shape = 1, size = 2) +
theme(panel.grid = element_blank())
get_VisDegs <- function(size,distance){
((2*atan2(size,(2*distance)))*180)/pi
}
dist = 54.4
ppcm <- 1920/54
Screen_dist <- 53
get_VisDegs(14/ppcm,Screen_dist)
log2(100000000) + 1
100000000/(log2(100000000) + 1)
(10-1)(10)/2
(10-1)*(10)/2
5*(t) + 5*(s) = 25
t = s/4
t = 5
5*t
4t
5*(4*t)
5*(4*t) + 4*(2*t)
n = 10
100*log2(n)
n = 100
100*log2(n)
n = 1000
100*log2(n)
n = 1000000000
100*log2(n)
n = 100
n*log2(n)
n^2
n = 1000
n*log2(n)
n^2
100
n = 100
n*log2(n)
log2(n)
n^2
sqrt(34)
mean(21 + 18 + 20 + 32 + 24)
mean(c(21, 18, 20, 32, 24))
mean(c(21, 18, 20, 32, 24, 26))
factorial(26)/(factorial(6)*factorial(10)*(2^10))
(1+2)^2-(1-2)^2
4*(1*2)
(0.66*0.2)/(0.66*0.2)+(0.5*0.8)
(0.66*0.2)/((0.66*0.2)+(0.5*0.8))
(0.33*0.2)/((0.33*0.2)+(0.5*0.8))
(0.33*0.2)/((0.33*0.2)+(0.66*0.8))
(0.5*0.2)/((0.5*0.2)+(0.1*0.8))
(0.5*0.2)/((0.5*0.2)+(1*0.8))
(0.66*0.2)/((0.66*0.2)+(0*0.8))
setwd("F:/Uni/Github/Instructed_Eye_movements")
#### Creating new datasets ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script for processing data to be analysed by Elle
# This script will produce datasets about:
# Expected accuracy had they performed optimally
# Expected accuracy based on fixation locations (to account for chance)
# Actual Accuracy accross blocks:
#    - Doesn't Alasdair's script do this one?
# Proportion of time looking at side vs centre across 9 tested distances
#    - Also by block number (first half vs second half)
#### libraries needed ####
library(tidyverse)
library(reshape2)
library(psyphy)
#### any functions ####
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Constants ####
Screen_dist <- 53
ppcm <- 1920/54
#### Extra information ####
# I think there were 36 pixels per degree... Will have to check though
pixVD = 0.036
options(digits = 4)
#### Read in part 1 measures for accuracy across distances ####
# create dataframe
df <- tibble(
block = numeric(),
separation = numeric(),
accuracy = numeric()
)
# colnames
import_names <- c(
"block",
"separation",
"accuracy"
)
# set up directory for loop
results_files <- dir("data/results/Part_1/")
# read in data
for (f in results_files){
d <- read.csv(
paste("data/results/Part_1/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# re-order
df <- select(df,
participant,
block,
separation,
accuracy)
# remove NA trials
df <- df[complete.cases(df),]
#### Calculate curve for accuracy across distances ####
sep <- c(1:450)
# data frame for accuracy accross separations
acc_sep <- tibble(
participant = character(),
separation = numeric(),
accuracy = numeric()
)
# loop through participants for accuracy over all separations
# very slow loop... must be a quicker way to do this?
# the for(i in 1:640) causes it to slow... Can do this another way?
#for (p in unique(df$participant))
#{
#  # general linear model
#  ss = df[which(df$participant==p),]
#  m = glm(data=ss, accuracy~separation, family=binomial(mafc.probit(2)))
#  for(i in 1:640){
#    y = predict(m, data.frame(separation = i), type = "response")
#
#    # add into new data frame
#    acc_sep <- rbind(acc_sep, data.frame(participant = p,
#                                         separation  = i,
#                                         accuracy = y))
#  }
#}
# participant 1 might need to be excluded
# save this
# save(acc_sep, file = "scratch/acc_sep")
# load in the above
load("scratch/acc_sep")
rm(sep)
df_nar <- df[complete.cases(df),]
# summary data for mean accuracy
temp <- group_by(df_nar, participant, separation)
agdat <- summarise(temp, meanAcc = mean(accuracy))
View(agdat)
rm(temp)
plt = ggplot(df_nar, aes(x=separation, y=accuracy))
plt = plt + stat_smooth(colour="black", method=glm, method.args = list(family=binomial(mafc.probit(2))), se=F, fullrange=TRUE)
plt = plt + geom_point(data=agdat, aes(x=separation, y=meanAcc))
plt = plt + facet_wrap(~participant) + theme_minimal()
plt = plt + scale_y_continuous(name="proportion correct", breaks=c(0.25, 0.5, 0.75, 1.0))
plt = plt + scale_x_continuous(name="separation (pixels for now)", limits=c(0,450), breaks=c(0,150,300,450))
plt
rm(plt, agdat)
load("scratch/Elle_switch_nar_data")
switch_df <- merge(acc_sep, switch_df, by = c("participant", "separation"))
switch_df <- select(switch_df,
participant,
part,
block,
separation,
fixated_box,
correct,
switch_point,
condition,
centre,
accuracy)
switch_df$switch_point <- as.numeric(switch_df$switch_point)
switch_df$switch_point <- round(switch_df$switch_point)
# check switch points against accuracy
temp <- group_by(switch_df, participant, separation)
temp <- summarise(temp, mean_acc = mean(accuracy))
switch_points <- group_by(switch_df, participant)
switch_points <- summarise(switch_points, switch_point = unique(switch_point))
temp <- merge(temp, switch_points)
rm(temp)
for(i in unique(switch_df$participant)){
switch_df$standard_sep[switch_df$participant == i] <- as.numeric(as.factor(switch_df$separation[switch_df$participant == i]))
}
# subtract 5 to centre the switch point
switch_df$standard_sep <- switch_df$standard_sep - 5
rm(i)
temp <- switch_df
new_sep_dat <- tibble(participant = character(),
separation = numeric(),
as_numbers = numeric(), #Standardised
as_factors = character(), # Standardised as factors
offset_from_sp = numeric()) # Offset from switch_point in VD
for(p in unique(temp$participant)){
a <- -3
sp <- unique(temp$switch_point[temp$participant == p])
for(s in sort(unique(temp$separation[temp$participant == p]))){
if(s == 284){
new_sep <- a - 0.5
new_sep2 <- as.factor(s)
} else if(s == 640) {
new_sep <- a
new_sep2 <- as.factor(s)
} else {
new_sep <- a
new_sep2 <- as.factor(new_sep)
a <- a + 1
}
new_sep3 <- get_VisDegs((s - sp)/ppcm,Screen_dist)
new_sep_dat <- rbind(new_sep_dat, data.frame(participant = p,
separation = s,
as_numbers = new_sep,
as_factors = new_sep2,
offset_from_sp = new_sep3))
}
}
rm(a, p, s, new_sep, new_sep2, new_sep3, sp, temp)
save(new_sep_dat, file = "scratch/new_slabs_dat")
switch_df <- merge(switch_df, new_sep_dat)
switch_df$act_acc <- switch_df$accuracy
switch_df$act_acc[switch_df$centre == 0] <- 0.75
switch_df$opt_fix <- 0
head(switch_df)
switch_df$opt_fix[switch_df$accuracy > 0.75] <- 1
switch_df$opt_acc <- switch_df$accuracy
switch_df$opt_acc[switch_df$opt_fix == 0] <- 0.75
switch_df$exp_acc <- switch_df$accuracy
switch_df$exp_acc[switch_df$centre == 0] <- 0.75
switch_df$half[switch_df$block < 5] <- "first"
switch_df$half[switch_df$block > 4] <- "second"
# save this
save(switch_df, file = "scratch/switch_df")
switch_df$Vis_Degs <- get_VisDegs(switch_df$separation/ppcm, Screen_dist)
Act_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_degs, half, condition) %>%
summarise(mean_acc = mean(correct))
switch_df$Vis_Degs <- get_VisDegs(switch_df$separation/ppcm, Screen_dist)
Act_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_degs, half, condition) %>%
summarise(mean_acc = mean(correct))
Act_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_Degs, half, condition) %>%
summarise(mean_acc = mean(correct))
Act_Acc_vdegs$acc_type <- "Actual"
Opt_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_Degs, half, condition) %>%
summarise(mean_acc = mean(opt_acc))
Opt_Acc_vdegs$acc_type <- "Optimal"
Accuracy_vdegs <- merge(Act_Acc_vdegs, Opt_Acc_vdegs)
write.table(Accuracy_Vdegs, file = "scratch/Accuracy_Vdegs.txt", sep = "\t")
write.table(Accuracy_vdegs, file = "scratch/Accuracy_Vdegs.txt", sep = "\t")
Accuracy_vdegs <- rbind(Act_Acc_vdegs, Opt_Acc_vdegs)
write.table(Accuracy_vdegs, file = "scratch/Accuracy_Vdegs.txt", sep = "\t")
write.table(Accuracy_vdegs, file = "scratch/Accuracy_Vdegs.txt", row.names = F, sep = "\t")
rm(list = ls())
setwd("F:/Uni/PhD/1st year/Testing Us")
setwd("F:/Uni/PhD/1st year/Groups/Josephine")
#### For Josephine ####
#### libraries needed ####
library(tidyverse)
library(reshape2)
library(psyphy)
#### Any Functions ####
# function to get VisDegs
get_VisDegs <- function(x,y){
(2*atan2(x,(2*y)))*(180/pi)
}
#### Constants ####
Screen_dist <- 53
ppcm <- 1920/54
#### Extra information ####
options(digits = 4)
#### Read in part 1 measures for accuracy across distances ####
# create dataframe
df <- tibble(
block = numeric(),
separation = numeric(),
accuracy = numeric()
)
# colnames
import_names <- c(
"block",
"separation",
"accuracy"
)
# set up directory for loop
results_files <- dir("data/results/Part_1/")
# read in data
for (f in results_files){
d <- read.csv(
paste("data/results/Part_1/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# re-order
df <- select(df,
participant,
block,
separation,
accuracy)
# remove NA trials
df <- df[complete.cases(df),]
df_part1 <- df
# load in part 2
load("scratch/df_part2")
df_part2 <- df
# tidy
rm(df)
#### Calculate curve for accuracy across distances ####
# not needed....
# sep <- c(min(df_part2$separation):(2*max(df_part2$separation)))
# data frame for accuracy accross separations
acc_sep <- tibble(
participant = character(),
separation = numeric(),
accuracy = numeric()
)
load("scratch/acc_sep")
df_nar <- df_part1[complete.cases(df_part1),]
# summary data for mean accuracy
temp <- group_by(df_nar, participant, separation)
agdat <- summarise(temp, meanAcc = mean(accuracy))
# tidy
rm(temp)
# make plot
plt = ggplot(df_nar, aes(x=get_VisDegs(separation/ppcm,Screen_dist), y=accuracy))
plt = plt + stat_smooth(method=glm,
method.args = list(family=binomial(mafc.probit(2))),
se=F,
fullrange=TRUE)
plt = plt + geom_point(data=agdat,
aes(x=get_VisDegs(separation/ppcm,Screen_dist),
y=meanAcc))
plt = plt + facet_wrap(~participant) + theme_bw()
plt = plt + scale_y_continuous(name="Accuracy",
breaks=c(0.25, 0.5, 0.75, 1.0))
plt = plt + scale_x_continuous(name="Delta (Visial Degrees)",
breaks = c(3,6,9,12))#, limits=c(0,450), breaks=c(0,150,300,450))
# ggsave("scratch/plots/Part_1_Josephine.pdf", height = 6, width = 6)
# or as png?
# ggsave("scratch/plots/Part_1_Plots.png", height = 6, width = 8)
plt
rm(plt, agdat)
load("scratch/switch_nar_data")
switch_df <- merge(acc_sep, switch_df, by = c("participant", "separation"))
switch_df <- select(switch_df,
participant,
part,
block,
separation,
fixated_box,
correct,
switch_point,
centre,
accuracy)
switch_df$switch_point <- as.numeric(switch_df$switch_point)
switch_df$switch_point <- round(switch_df$switch_point)
# check switch points against accuracy
temp <- group_by(switch_df, participant, separation)
temp <- summarise(temp, mean_acc = mean(accuracy))
switch_points <- group_by(switch_df, participant)
switch_points <- summarise(switch_points, switch_point = unique(switch_point))
temp <- merge(temp, switch_points)
# tidy
rm(temp)
# NB: as.factor() then as.numeric() will produce a number for each level
#     Use this to transform data so it's standardised accross participants
#     order of levels is important though so be careful
#     might need to reorder the levels before you do this
#     Though there seem to be nine levels for each participant, not 7?
#### Standardise separations ####
for(i in unique(switch_df$participant)){
switch_df$standard_sep[switch_df$participant == i] <- as.numeric(as.factor(switch_df$separation[switch_df$participant == i]))
}
# subtract 5 to centre the switch point
switch_df$standard_sep <- switch_df$standard_sep - 5
#tidy
rm(i)
#### column for accuracy given fixation location ####
# gives accuracy given where they looked based on separation
switch_df$act_acc <- switch_df$accuracy
switch_df$act_acc[switch_df$centre == 0] <- 0.75
#### make column for optimal accuracy ####
# first make opt fixation location
switch_df$opt_fix <- 0
# # this way gives some people opt accuracy below 0.75, may need to redefine their accuracy?
# switch_df$opt_fix[switch_df$separation > switch_df$switch_point] <- 1
# This way should work
switch_df$opt_fix[switch_df$accuracy > 0.75] <- 1
# now give accuracy if they had followed this strategy
switch_df$opt_acc <- switch_df$accuracy
switch_df$opt_acc[switch_df$opt_fix == 0] <- 0.75
# Now get Expected Accuracy
switch_df$exp_acc <- switch_df$accuracy
switch_df$exp_acc[switch_df$centre == 0] <- 0.75
#### Accuracy: make new datasets ####
# first, set first half vs second half
switch_df$half[switch_df$block < 5] <- "first"
switch_df$half[switch_df$block > 4] <- "second"
head(switch_df)
switch_df$Vis_Degs <- get_VisDegs(switch_df$separation/ppcm, Screen_dist)
Act_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_Degs, half, condition) %>%
summarise(mean_acc = mean(correct))
Act_Acc_vdegs$acc_type <- "Actual"
head(switch_df)
Act_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_Degs) %>%
summarise(mean_acc = mean(correct))
Act_Acc_vdegs$acc_type <- "Actual"
Opt_Acc_vdegs <- switch_df %>%
group_by(participant, Vis_Degs) %>%
summarise(mean_acc = mean(opt_acc))
Opt_Acc_vdegs$acc_type <- "Optimal"
Accuracy_vdegs <- rbind(Act_Acc_vdegs, Opt_Acc_vdegs)
write.table(Accuracy_vdegs, file = "scratch/Accuracy_Vdegs_us.txt", row.names = F, sep = "\t")
