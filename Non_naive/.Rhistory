x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
rm(list = ls())
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
d = 10
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
d = 3
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
d = 1
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 0.8
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 0.7
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 6
d = 6
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 2
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
rm(m, plt)
setwd("F:/Uni/Github/Transfer_Paper/Non_naive")
#### Putting second session plots together ####
# retrieve the data, make the plots, put them side by side
#### Libraries ####
library(tidyverse)
library(gridExtra)
#### Any functions ####
# get visual degrees
get_VisDegs <- function(separation,distance){
(2*atan2(separation,(2*distance)))*(180/pi)
}
#### Putting second session plots together ####
# retrieve the data, make the plots, put them side by side
#### Libraries ####
library(tidyverse)
library(gridExtra)
#### Any functions ####
# get visual degrees
get_VisDegs <- function(separation,distance){
(2*atan2(separation,(2*distance)))*(180/pi)
}
#### Any constants ####
# Detection
ppcm <- 1920/54
Screen_dist <- 53
# Throwing
slab_size <- 0.46
#### Load data ####
# Detection first
# switch point data
load("Detection/scratch/opt_fixations")
# dataset
load("Detection/scratch/side_fixations")
# Throwing
# switch points
load("Throwing/scratch/Opt_Pos")
# dataset
load("Throwing/scratch/df_part2")
#### PLOTS ####
#### PLOTS: DETECTION TASK ####
dot_plt <- ggplot(side_fixations, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop_fixated))
dot_plt <- dot_plt + geom_point()
dot_plt <- dot_plt + theme_bw()
dot_plt <- dot_plt + facet_wrap(~participant)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(get_VisDegs(separation/ppcm, Screen_dist),
fix_locations),
size = 0.15)
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt
