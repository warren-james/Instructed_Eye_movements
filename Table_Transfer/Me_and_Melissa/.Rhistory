person_b_unique_days = person_b_days-shared_days
cost_people_shared_days = cost_shared_days/lenght(c(person_a,person_b))
cost_people_shared_days = cost_shared_days/length(c(person_a,person_b))
remaining_cost = total_cost - cost_shared_days
person_a_cost = cost_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
total_days-shared_days
person_a_unique_days
remaining_cost
cost_shared_days
person_a_cost = cost_people_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost/(person_b_unique_days/(total_days-shared_days))
person_b_unique_days
total_days-shared_days
0/1
person_a_cost = cost_people_shared_days + remaining_cost*(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost*(person_b_unique_days/(total_days-shared_days))
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
rm(list = ls())
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks = (total_cost*(shared_weeks/total_weeks))/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
remaining_weeks_1 = total_weeks- shared_weeks
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
total_cost - (total_cost*(shared_weeks/total_weeks))*length(c(weeks_w, weeks_k, weeks_j, weeks_l))
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remaining_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + (total_cost - (cost_shared_weeks_pp + cost_shared_weeks_2_pp))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
# tidy
rm(cost_shared_weeks, cost_shared_weeks_2, cost_shared_weeks_2_pp, cost_shared_weeks_pp,
fst_remaining_weeks_j, fst_remaining_weeks_k, fst_remaining_weeks_l, fst_remaining_weeks_w,
remainig_cost, remaining_cost, remaining_cost_2, remaining_weeks_1, remaining_weeks_2,
shared_weeks, shared_weeks_2,
total_cost, total_weeks,
weeks_j, weeks_k, weeks_l, weeks_w)
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 2
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
#### THIS DOESN'T WORK #####
# let's work it out properly
# tidy first
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
rm(all_weeks, total_owed)
temp_w = (total_cost/4)*(10/12)
temp_l = (total_cost/4)*(10/12)
temp_k = (toal_cost/4)*(11/12)
temp_k = (total_cost/4)*(11/12)
temp_k = ((total_cost-temp_w-temp_l)/4)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)
new_cost = total_cost -temp_w - temp_l
temp_k = (new_cost/2)*0.5
temp_k = (new_cost/2)*(1/3)
temp_k = (new_cost/2)*(11/12)
temp_k = (new_cost/2)*(1/2)
(2/2)*(1/2)
temp_w2 = (total_cost)*(10/(10+10+11+12))
temp_k = (total_cost/4)*(11/12)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
# total shared weeks
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
remaining_weeks_1 = total_weeks- shared_weeks
# everyone's cost for those shared weeks
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remaining_cost = total_cost - cost_shared_weeks
# Is there a unique one left?
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
# can work out the people with only shared days now
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
# don't worry about working out those with 0
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
temp_w = (total_cost/4) * (10/12)
library(tidyverse)
library(rethinking)
dat <- data.frame(x = beta(100, 3, 1.8))
dat <- data.frame(x = beta(100, 3, 1.8))
dat <- data.frame(x = rbeta(100, 3, 1.8))
dat
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
head(dat)
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
View(dat)
m <- map2stan(
alist(
x ~ dbetabinom(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
m <- map2stan(
alist(
x ~ dbeta2(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
library(tidyverse)
library(rethinking)
# simulate some proportion data
dat <- data.frame(x = rbeta(100, 3, 1.8))
# fit Beta distributon to data
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
summary(m)
n_samples = 100
post <- extract.samples(m, n_samples)
x <- seq(0,1, 0.01)
y <- dbeta(seq(0,1, 0.01), shape1 = 2, shape2 = 2)
p <- unlist(map2(post$shape1, post$shape2, dbeta, x  = x ))
n <- rep(1:n_samples, each = length(x))
fits <- tibble(x = rep(x, n_samples), p , n = n)
post <- extract.samples(m)
mu <- HPDI(with(post, shape1 / (shape1 + shape2), prob = 0.99))
plt <- ggplot()
plt <- plt + geom_density(data = dat,aes(x = dat$x), fill = "#ec9844", colour = "#ec9844", adjust = 1/2)
plt <- plt + geom_rect(aes(xmin = mu[1], xmax = mu[2], ymin = 0, ymax = Inf), fill = "blue", alpha = 0.3)
plt <- plt + geom_path(data = fits, aes(x = x, y = p, group = n), alpha = 0.1, size = 1)
plt <- plt + scale_x_continuous("proporiton", expand = c(0,0))
plt <- plt + scale_y_continuous("density", expand = c(0,0), limits = c(0, 2))
plt <- plt + theme_bw()
plt
n = 1000
dat <- data.frame(
x = c(rbeta(n, 3, 2), rbeta(n, 1, 2)),
z = rep(0:1, each = n))
plt <- ggplot(dat)
plt <- plt + geom_density(
aes(x = dat$x, fill = as.factor(dat$z)), adjust = 1/2)
plt
head(dat)
setwd("E:/Github/Instructed_Eye_movements")
#### Plotting Script ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script used to make plots of proportion of fixations
# made to the centre or side box(es)
#### libraries needed ####
library(tidyverse)
#### Any functions ####
# Gets Visual Degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Any constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load in data ####
load("scratch/Elle_switch_nar_data")
#### separate datasets ####
# this part is so we have a separate dataset for:
# no instructions/first half
no_inst_1 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block < 5,]
# no instructions/second half
no_inst_2 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block > 4,]
# instructions/tutorial
inst_tut <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 3,]
# instructions/task
inst_tas <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 2,]
#### Assuming we only want to look at part 2 for each participant ####
df_part2 <- switch_df[switch_df$part == 2,]
#### make plots ####
# setup data.frame/tibble for plots
# centre proportions
temp <- group_by(df_part2, participant,separation,condition)
centre_prop <- summarise(temp, prop_fixated = mean(centre))
centre_prop$box <- "centre"
# side proportions
side_prop <- summarise(temp, prop_fixated = 1 - mean(centre))
side_prop$box <- "side"
# tidy
rm(temp)
# merge data
plt_dat <- rbind(centre_prop, side_prop)
# tidy
rm(centre_prop, side_prop)
# need to add switch point data back in
temp <- group_by(df_part2, participant, condition)
switch_points <- summarise(temp, switch_point = unique(switch_point))
# tidy
rm(temp)
# now to make the plots
prop_plt <- ggplot(data = plt_dat,
aes(x = separation,
y = prop_fixated))
prop_plt <- prop_plt + geom_area(aes(colour = box,
fill = box),
position = "stack")
prop_plt <- prop_plt + geom_vline(data = switch_points,
aes(xintercept = as.numeric(switch_point)),
linetype = "dashed")
prop_plt <- prop_plt + facet_wrap(~condition + participant)
prop_plt
# save plot
# ggsave("scratch/plots/proportions_plot.pdf", width = 10, height = 10)
# dots version
side_fix_dat <- plt_dat[plt_dat$box == "side",]
#### Make switch line again ####
seps <- seq(min(df_part2$separation), max(df_part2$separation), 0.5)
switch_line <- tibble(participant = character(),
condition = character(),
separation = numeric(),
Fixated_box = numeric())
# create the lines
for(p in unique(df_part2$participant)){
switch <- unique(switch_points$switch_point[switch_points$participant == p])
switch <- as.numeric(switch)
c <- unique(df_part2$condition[df_part2$participant == p])
# go through sequence
for(s in seps){
if(s < switch){
fl <- 0
} else if(s > switch){
fl <- 1
}
switch_line <- rbind(switch_line, data.frame(participant = p,
condition = c,
separation = s,
Fixated_box = fl))
}
}
# tidy
rm(fl,p, s, seps, switch)
temp_switch <- switch_line
temp_fix <- side_fix_dat
levels(temp_fix$condition)
str(temp_fix)
str(temp_switch)
temp_fix$condition <- as.factor(temp_fix$condition)
str(temp_fix)
levels(temp_fix$condition)
levels(temp_switch$condition)
temp_fix$condition[temp_fix$condition == "Instructions"] <- "Primed"
temp_fix <- side_fix_dat
temp_fix$condition <- as.factor(temp_fix$condition)
relevel(temp_fix$condition, c("Instructions"="Primed", "No_intsrutcions"="Unprime"Unprimed))
relevel(temp_fix$condition, c("Instructions"="Primed", "No_intsrutcions"="Unprimed"))
levels(temp_fix)
levels(temp_fix$condition)
levels(temp_fix$condition) <- c("Primed", "Unprimed")
levels(temp_fix$condition)
str(temp_fix)
side_fix_dat$condition <- as.factor(side_fix_dat$condition)
levels(side_fix_dat$condition)
levels(side_fix_dat$condition) <- c("Primed", "Unprimed")
levels(switch_line$condition)
levels(switch_line$condition) <- c("Unprimed", "Primed")
dot_plt
# plt
dot_plt <- ggplot(side_fix_dat, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop_fixated,
colour = condition))
dot_plt <- dot_plt + geom_point()
dot_plt <- dot_plt + geom_line(data = switch_line,
aes(get_VisDegs(separation/ppcm, Screen_dist),
Fixated_box))
dot_plt <- dot_plt + theme_bw()
# dot_plt <- dot_plt + geom_path(data = switch_line,
#                                colour = "black",
#                                aes(get_VisDegs(separation/ppcm, Screen_dist),
#                                    Fixated_box),
#                                size = 0.15)
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of fixations to a side box"
dot_plt$labels$colour <- "Condition"
dot_plt
side_fix_dat$condition <- factor(side_fix_dat$condition,
levels(side_fix_dat$condition)[c(2,1)])
dot_plt <- ggplot(side_fix_dat, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop_fixated,
colour = condition))
dot_plt <- dot_plt + geom_point()
dot_plt <- dot_plt + geom_line(data = switch_line,
aes(get_VisDegs(separation/ppcm, Screen_dist),
Fixated_box))
dot_plt <- dot_plt + theme_bw()
# dot_plt <- dot_plt + geom_path(data = switch_line,
#                                colour = "black",
#                                aes(get_VisDegs(separation/ppcm, Screen_dist),
#                                    Fixated_box),
#                                size = 0.15)
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of fixations to a side box"
dot_plt$labels$colour <- "Condition"
dot_plt
dot_plt
ggsave("scratch/plots/Part2_dots_wcolour.png")
rm(list = ls())
setwd("F:/Uni/PhD/1st year/Table Transfer Task/Me_and_Melissa")
library(tidyverse)
#### Any functions ####
#### Constants ####
slab_size <- 0.46
#### load in Data ####
df <- read.csv("data/results.csv")
# make participant a factor
df$Participant <- as.factor(df$Participant)
# sort out levels for Order
df$Order <- as.factor(df$Order)
levels(df$Order) <- c("Unprimed", "Primed")
# Normalise position
df$Participant.pos <- abs(df$Participant.pos/df$Hoop.dist)
#### make plots ####
plt <- ggplot(df, aes(Hoop.dist*slab_size, Participant.pos,
colour = Order))
plt <- plt + geom_point()
plt <- plt + theme_bw()
plt <- plt + facet_wrap(~Order + Participant, ncol = 8)
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
plt <- plt + scale_x_continuous(limits = c(1,7))
plt <- plt + theme(legend.position = "bottom")
plt$labels$x = "Delta (Metres)"
plt$labels$y = "Normalised Standing position"
plt$labels$colour = "Condition"
plt
#NB: unprimed comes first
# save this
# ggsave("scratch/plots/double_blind.png")
#### Analyses ####
#### Analyses: t.tests... ugh ####
# first just a simple t.test of position
t_test_dat <- df[df$Hoop.dist == 13 | df$Hoop.dist == 5,]
# try just large hoops
large <- t_test_dat[t_test_dat$Hoop.dist == "13",]
small <- t_test_dat[t_test_dat$Hoop.dist == "5",]
# now do the t.test
# large
t.test(large$Participant.pos ~ large$Order)
# small
t.test(small$Participant.pos ~ small$Order)
# try lm?
anova(lm(Participant.pos ~ Hoop.dist + Order,
data = t_test_dat))
# try difference value
small <- select(small,
Participant,
Order,
Hoop.dist,
Participant.pos)
colnames(small) <-  c("Participant",
"Order",
"Close_hoop",
"Participant.Pos")
small <- small %>%
group_by(Participant, Order, Close_hoop) %>%
summarise(avg_pos_close = mean(Participant.Pos))
large <- select(large,
Participant,
Order,
Hoop.dist,
Participant.pos)
colnames(large) <-  c("Participant",
"Order",
"Far_hoop",
"Participant.Pos")
large <- large %>%
group_by(Participant, Order, Far_hoop) %>%
summarise(avg_pos_far = mean(Participant.Pos))
# This is what Mellissa did
Both <- merge(small, large)
Both$Difference <- Both$avg_pos_far - Both$avg_pos_close
# tidy
rm(small, large)
t.test(Both$Difference ~ Both$Order)
# gives the same results as mellisa
#### remake box_plots with this data ####
# make plot
plt <- ggplot(Both, aes(Order, Difference))
plt <- plt + geom_boxplot()
plt <- plt + theme_bw()
plt$labels$y <- "Change in Standing Position"
plt$labels$x <- "Group"
plt
plt <- plt + scale_x_continuous(limits = -0.375, 1)
plt
plt <- ggplot(Both, aes(Order, Difference))
plt <- plt + geom_boxplot()
plt <- plt + theme_bw()
plt <- plt + scale_y_continuous(limits = -0.375, 1)
plt$labels$y <- "Change in Standing Position"
plt$labels$x <- "Group"
plt
plt <- ggplot(Both, aes(Order, Difference))
plt <- plt + geom_boxplot()
plt <- plt + theme_bw()
plt <- plt + scale_y_continuous(limits = c(-0.375, 1))
plt$labels$y <- "Change in Standing Position"
plt$labels$x <- "Group"
plt
plt <- ggplot(Both, aes(Order, Difference))
plt <- plt + geom_boxplot()
plt <- plt + theme_bw()
plt <- plt + scale_y_continuous(limits = c(-0.4, 1))
plt$labels$y <- "Change in Standing Position"
plt$labels$x <- "Group"
plt
ggsave("scratch/plots/box_plot.png")
