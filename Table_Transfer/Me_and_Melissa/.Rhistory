x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 0.7
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 6
d = 6
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 2
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
rm(m, plt)
library(rstan)
setwd("F:/Uni/PhD/2nd Year/Mres courses/First semester/workshop 3")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
data<-read_csv(file = "data/workshop 3 exercise data.csv")
data <- data %>%
mutate(subject =row_number())%>%
select(subject,everything())
head(data)
plt <- ggplot(data, aes(iq, age))
plt <- plt + geom_jitter()
plt2 <- ggMarginal(plt, type = "histogram")
library(gridExtra)
plt <- ggplot(data, aes(iq, age))
plt <- plt + geom_jitter()
plt2 <- ggMarginal(plt, type = "histogram")
plt <- ggplot(data, aes(iq, age))
plt <- plt + geom_jitter()
plt2 <- ggMarginal(plt, type = "histogram")
plt <- ggplot(data, aes(iq, age))
plt <- plt + geom_jitter()
plt
library(ggExtra)
plt2 <- ggMarginal(plt, type = "histogram")
plt2
plot(plt2)
plt2
plot(plt2)
plt2
ggplot(data = data, aes(x = gender, y = iq, fill = vote))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),
trim=FALSE, alpha = 0.75) +
geom_point(aes(color = vote),
position = position_jitter(width = .2, height = 0.05),
size = .5, alpha = .75, show.legend = FALSE)+
coord_flip()+
geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5)+
geom_pointrange(
data = summary_data,
aes(gender, mean, ymin=min, ymax=max),
shape = 20,
position = position_dodge(width = 0.1),
show.legend = FALSE
)
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
)
}
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
ggplot(data = data, aes(x = gender, y = iq, fill = vote))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),
trim=FALSE, alpha = 0.75) +
geom_point(aes(color = vote),
position = position_jitter(width = .2, height = 0.05),
size = .5, alpha = .75, show.legend = FALSE)+
coord_flip()+
geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5)+
geom_pointrange(
data = summary_data,
aes(gender, mean, ymin=min, ymax=max),
shape = 20,
position = position_dodge(width = 0.1),
show.legend = FALSE
)
summary_data <- data %>%
group_by(vote, gender) %>%
summarise(mean = mean(iq, na.rm = TRUE),
min = mean(iq) - qnorm(0.975)*sd(iq)/sqrt(n()), # this is standard error
max = mean(iq) + qnorm(0.975)*sd(iq)/sqrt(n()),
sd = sd(iq)
)
summary_data <- data %>%
group_by(vote, gender) %>%
summarise(mean = mean(iq, na.rm = TRUE),
min = mean(iq) - qnorm(0.975)*sd(iq)/sqrt(n()), # this is standard error
max = mean(iq) + qnorm(0.975)*sd(iq)/sqrt(n()),
sd = sd(iq)
)
ggplot(data = data, aes(x = gender, y = iq, fill = vote))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),
trim=FALSE, alpha = 0.75) +
geom_point(aes(color = vote),
position = position_jitter(width = .2, height = 0.05),
size = .5, alpha = .75, show.legend = FALSE)+
coord_flip()+
geom_boxplot(width = .1, outlier.shape = NA, alpha = 0.5)+
geom_pointrange(
data = summary_data,
aes(gender, mean, ymin=min, ymax=max),
shape = 20,
position = position_dodge(width = 0.1),
show.legend = FALSE
)
levels(summary_data$vote)
levels(as.factor(summary_data$vote))
levels(as.factor(data$vote))
rm(list = ls())
setwd("F:/Uni/Github/Transfer_Paper/Stan_stuff")
library(tidyverse)
library(rstan)
library(psych)
load("../Instructed_Eye_Movements/scratch/models_df")
stan_df <- list(
N = nrow(df),
inst = df$given_instruction,
acc = df$correct,
half = df$second_half,
S = length(unique(df$participant)),
subj = df$participant
)
m4_1 <- stan(
file = "exp3_m5.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m4_1 <- stan(
file = "exp3_m5.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m4_1 <- stan(
file = "exp3_m5.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m4_1 <- stan(
file = "exp3_m5.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
m4_1
logistic(1.05)
logistic(1.05 + 0.29)
logistic(1.05 -0.15)
logistic(1.05 - 0.15)
logistic(1.05 - 0.15 + 0.29)
load("scratch/models/m3_1")
m3
m3_1
m4_2 <- m4_1
load("scratch/models/m4_1")
dir()
dir("scratch")
m4_1
m5 <- m4_1
save(m5, file = "scratch/models_output/m5")
save(m5, file = "scratch/model_outputs/m5")
rm(list = ls())
setwd("F:/Uni/Github/Transfer_Paper/Table_Transfer/Me_and_Melissa")
#### This script is for double blind experiment ####
# has data for the reaching and throwing task for each paritipant
# No need to worry about switch points for this data
# They either did a nothing or the reaching task before the throwing task
#### Notes ####
# for Order: 0 = unprimed. 1 = primed
# Position is centred on 0
#### libraries ####
library(tidyverse)
library(ggthemes)
#### Any functions ####
#### Constants ####
slab_size <- 0.46
#### load in Data ####
df <- read.csv("data/results.csv")
# make participant a factor
df$Participant <- as.factor(df$Participant)
# sort out levels for Order
df$Order <- as.factor(df$Order)
levels(df$Order) <- c("Control", "Primed", "Optimal")
# Normalise position
df$Participant.pos <- abs(df$Participant.pos/df$Hoop.dist)
#### make plots ####
plt <- ggplot(df, aes(Hoop.dist*slab_size, Participant.pos,
colour = Order))
plt <- plt + geom_point()
plt <- plt + theme_bw()
plt <- plt + facet_wrap(~Order + Participant, ncol = 8)
plt <- plt + scale_x_continuous(limits = c(1,7))
plt <- plt + theme_bw()
plt <- plt + scale_colour_ptol()
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
plt <- plt + theme(legend.position = "none")
plt <- plt + xlab("delta (metres)")
plt <- plt + ylab("normalised standing position")
plt
t_test_dat <- df[df$Hoop.dist == 13 | df$Hoop.dist == 5,]
large <- t_test_dat[t_test_dat$Hoop.dist == "13",]
small <- t_test_dat[t_test_dat$Hoop.dist == "5",]
t.test(large$Participant.pos ~ large$Order)
t.test(small$Participant.pos ~ small$Order)
small <- select(small,
Participant,
Order,
Hoop.dist,
Participant.pos)
colnames(small) <-  c("Participant",
"Order",
"Close_hoop",
"Participant.Pos")
small <- small %>%
group_by(Participant, Order, Close_hoop) %>%
summarise(avg_pos_close = mean(Participant.Pos))
large <- select(large,
Participant,
Order,
Hoop.dist,
Participant.pos)
colnames(large) <-  c("Participant",
"Order",
"Far_hoop",
"Participant.Pos")
large <- large %>%
group_by(Participant, Order, Far_hoop) %>%
summarise(avg_pos_far = mean(Participant.Pos))
# This is what Mellissa did
Both <- merge(small, large)
Both$Difference <- Both$avg_pos_far - Both$avg_pos_close
t.test(Both$Difference ~ Both$Order)
e ~ Both$Order,
var.equal = T)
t.test(Both$Difference ~ Both$Order,
var.equal = T)
t.test(Both$Difference ~ Both$Order,
var.equal = F)
t.test(Both$Difference ~ Both$Order,
var.equal = T)
t.test(Both$Difference ~ Both$Order,
var.equal = F)
