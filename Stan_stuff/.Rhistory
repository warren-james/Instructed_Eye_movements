x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.05))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
d = 10
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
d = 3
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.05, x+0.02))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
d = 1
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 0.8
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 0.7
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 6
d = 6
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 2
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
rm(m, plt)
library(rstan)
library(tidyverse)
library(rstan)
x = seq(-5, 5, 0.1)
y = 1/(1+exp(-(x + 2 * runif(length(x))))) > 0.5
# setup list
glm_dat <- list(
x = x,
y = y,
N = length(y)
)
fit3 <- stan(
file = "linear_regression.stan",
data = glm_dat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 2,
refresh = 100
)
setwd("F:/Uni/Github/Transfer_Paper/Stan_stuff")
fit3 <- stan(
file = "linear_regression.stan",
data = glm_dat,
chains = 4,
warmup = 1000,
iter = 2000,
cores = 2,
refresh = 100
)
extract(fit3)
post_fit3 <- rstan:extract(fit3)
# extract samples
post_fit3 <- rstan::extract(fit3)
str(post_fit3)
View(post_fit3)
b <- mean(post_fit3$b)
c <- mean(post_fit3$c)
plot(x, b*x + c)
plot(x,y)
lines(x, b*x+c)
fit3 <- stan(
file = "linear_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
fit3 <- stan(
file = "linear_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
fit4 <- stan(
file = "logistic_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
fit4 <- stan(
file = "logistic_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
? inv_logit
? logit
post_fit4 <- rstan::extract(fit4)
b <- mean(post_fit3$b)
c <- mean(post_fit3$c)
# good(ish) plot, bad model
plot(x,y)
lines(x, logistic(b*x+c))
b <- mean(post_fit4$b)
c <- mean(post_fit4$c)
# good(ish) plot, bad model
plot(x,y)
lines(x, logistic(b*x+c))
logit
library(psych)
plot(x,y)
lines(x, logistic(b*x+c))
fit4 <- stan(
file = "logistic_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
fit4 <- stan(
file = "logistic_regression.stan",
data = glm_dat,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
