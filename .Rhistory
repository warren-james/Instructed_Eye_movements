mu <- a + b1*weight.s + b2*weight.s2 + b3*weight.s3,
a ~ dnorm(178,100),
b1 ~ dnorm(0,10),
b2 ~ dnorm(0,10),
b3 ~ dnorm(0,10),
sigma ~ dunif(0,50)
),
data = d)
m4.6 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b1*weight.s + b2*weight.s2 + b3*weight.s3,
a ~ dnorm(178,100),
b1 ~ dnorm(0,10),
b2 ~ dnorm(0,10),
b3 ~ dnorm(0,10),
sigma ~ dunif(0,50)
),
data = d)
test <- replicate(1e4, prod(0, 0, 10))
test
test <- replicate(1e4, prod(12, 0, 10))
head(test)
sim_mu <- rnorm(1e4, 0, 10)
sim_sig <- runif(1e4, 0, 10)
sim_prior <- rnorm(1e4, sim_mu, sim_sig)
sim_mu <- rnorm(1e4, 0, 10)
sim_sig <- runif(1e4, 0, 10)
sim_prior <- rnorm(1e4, sim_mu, sim_sig)
dens(sim_prior)
data(Howell1)
d <- Howell1
d2 <- d[d$age >= 18,]
rm(d)
d2$weight.s <- (d2$weight - mean(d2$weight)) / sd(d2$weight)
m4.4 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight.c,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
m4.4 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight.s,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
m4.H1 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight.s,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
post <- extract.samples(m4.H1)
mu_at_50 <- post$a + post$b * 50
mu_at_50
d2$weight.c <- d2$weight - mean(d2$weight)
m4.H1 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight.c,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
# now let's extract some stuff
post <- extract.samples(m4.H1)
m4.H1 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight.c,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
post <- extract.samples(m4.H1)
mu_at_50 <- post$a + post$b * 50
mean(mu_at_50)
m4.H1 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight,
a ~ dnorm(156,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
# now let's extract some stuff
post <- extract.samples(m4.H1)
mu_at_50 <- post$a + post$b * 50
mean(mu_at_50)
m4.H1 <- map(
alist(
height ~ dnorm(mu,sigma),
mu <- a + b*weight,
a ~ dnorm(178,100),
b ~ dnorm(0,10),
sigma ~ dunif(0,50)
) ,
data = d2)
# now let's extract some stuff
post <- extract.samples(m4.H1)
mu_at_50 <- post$a + post$b * 50
mean(mu_at_50)
weights_to_check <- c(46.95, 43.72, 64.78, 32.59, 54.63)
d = NULL
d = rbind(d, data.frame(weights_to_check))
d
for(i in weights_to_check)
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
d = rbind(d, data.frame(weights_to_check, Expected_height, Int89))
rm(d)
d = NULL
for(i in weights_to_check)
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
d = rbind(d, data.frame(weights_to_check, Expected_height, Int89))
temp <- post$a + post$b * 50
Int89 <- HPDI(temp, prob = 0.89)
Int89
Int89[1]
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
d = rbind(d, data.frame(weights_to_check, Expected_height, Int89[1], Int89[2]))
}
rm(d)
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
d = rbind(d, data.frame(weights_to_check, Expected_height, lower, upper))
}
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
d = rbind(d, data.frame(weights_to_check[i], Expected_height, lower, upper))
}
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
d = rbind(d, data.frame(i, Expected_height, lower, upper))
}
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
d = rbind(d, data.frame(i, Expected_height, lower, upper))
}
head(d)
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
Weights <- i
d = rbind(d, data.frame(Weights, Expected_height, lower, upper))
}
head(d)
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1,]
upper <- Int89[2,]
Weights <- i
d = rbind(d, data.frame(Weights, Expected_height, lower, upper))
}
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[,1]
upper <- Int89[,2]
Weights <- i
d = rbind(d, data.frame(Weights, Expected_height, lower, upper))
}
d = NULL
for(i in weights_to_check) {
temp <- post$a + post$b * i
Expected_height <- mean(temp)
Int89 <- HPDI(temp, prob = 0.89)
lower <- Int89[1]
upper <- Int89[2]
Weights <- i
d = rbind(d, data.frame(Weights, Expected_height, lower, upper))
}
temp <- post$a + post$b * 50
HDPI(temp)
HPDI(temp)
HPDI(temp)[1]
HPDI(temp)[2]
head(d)
d
data(islandsDistMatrix)
Dmat <- islandsDistMatrix
library(rethinking)
data(islandsDistMatrix)
Dmat <- islandsDistMatrix
data("Kline2")
d <- Kline2
# tidy
rm(Kline2)
# prep indexes
d$society <- 1:10
m13.7 <- map2stan(
alist(
total_tools ~ dpois(lambda),
log(lambda) <- a + g[society] + bp*logpop,
g[society] ~ GPL2( Dmat , etasq , rhosq , 0.01 ),
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
etasq ~ dcauchy(0,1),
rhosq ~ dcauchy(0,1)
),
data=list(
total_tools=d$total_tools,
logpop=d$logpop,
society=d$society,
Dmat=islandsDistMatrix),
warmup=2000 , iter=1e4 , chains=4)
precis(m13.7,depth=2)
post <- extract.samples(m13.7)
curve(median(post$etasq)*exp(-median(post$rhosq)*x^2), from = 0, to = 10,
xlab = "dist (thousand km", ylab = "covariance", ylim = c(0,1),
yaxp = c(0,1,4), lwd=2)
curve(median(post$etasq)*exp(-median(post$rhosq)*x^2), from = 0, to = 10,
xlab = "dist (thousand km", ylab = "covariance", ylim = c(0,1),
yaxp = c(0,1,4), lwd=2)
# plot 100 function samples
for( i in 1:100)
curve(post$etasq[i]*exp(-post$rhosq[i]*x^2), add = T,
col = col.alpha("black", 0.2))
dev.off()
K <- matrix(0, nrow = 10, ncol = 10)
for(i in 1:10)
for(j in 1:10)
K[i,j] <- median(post$etasq) *
exp(-median(post$rhosq) *
islandsDistMatrix[i,j]^2)
diag(K) <- median(post$etasq) + 0.01
Rho <- round(cov2cor(K), 2)
# add names for convenience
colnames(Rho) <- c("Ml","Ti","SC","Ya","Fi","Tr","Ch","Mn","To","Ha")
rownames(Rho) <- colnames(Rho)
Rhow
Rho
psize <- d$logpop/max(d$logpop)
psize <- exp(psize*1.5)-2
# plot raw data and labels
plot(d$lon2, d$lat, xlab = "longitude", ylab = "latitude",
col = randi2, cex = psize, pch = 16, xlim = c(-50,30))
labels <- as.character(d$culture)
text(d$lon2, d$lat, labels = labels, cex = 0.7, pos = c(2,4,3,3,4,1,3,2,4,2))
# overlay lines
for(i in 1:10)
for(j in 1:10)
if(i < j)
lines(c(d$lon2[i],d$lon2[j]), c(d$lat[i], d$lat[j]),
lwd=2, col = col.alpha("black", Rho[i,j]^2))
psize <- d$logpop/max(d$logpop)
psize <- exp(psize*1.5)-2
# plot raw data and labels
plot(d$lon2, d$lat, xlab = "longitude", ylab = "latitude",
col = randi2, cex = psize, pch = 16, xlim = c(-50,30))
labels <- as.character(d$culture)
text(d$lon2, d$lat, labels = labels, cex = 0.7, pos = c(2,4,3,3,4,1,3,2,4,2))
# overlay lines
for(i in 1:10)
for(j in 1:10)
if(i < j)
lines(c(d$lon2[i],d$lon2[j]), c(d$lat[i], d$lat[j]),
lwd=2, col = col.alpha("black", Rho[i,j]^2))
plot(d$lon2, d$lat, xlab = "longitude", ylab = "latitude",
col = rangi2, cex = psize, pch = 16, xlim = c(-50,30))
labels <- as.character(d$culture)
text(d$lon2, d$lat, labels = labels, cex = 0.7, pos = c(2,4,3,3,4,1,3,2,4,2))
# overlay lines
for(i in 1:10)
for(j in 1:10)
if(i < j)
lines(c(d$lon2[i],d$lon2[j]), c(d$lat[i], d$lat[j]),
lwd=2, col = col.alpha("black", Rho[i,j]^2))
logpop.seq <- seq( from=6 , to=14 , length.out=30 )
lambda <- sapply( logpop.seq ,
function(lp) exp( post$a + post$bp*lp ) )
lambda.median <- apply( lambda , 2 , median )
lambda.PI80 <- apply( lambda , 2 , PI , prob=0.8 )
# plot raw data and labels
plot( d$logpop ,
d$total_tools ,
col=rangi2 ,
cex=psize ,
pch=16 ,
xlab="log population" ,
ylab="total tools" )
text( d$logpop ,
d$total_tools ,
labels=labels ,
cex=0.7 ,
pos=c(4,3,4,2,2,1,4,4,4,2) )
# display posterior predictions
lines( logpop.seq ,
lambda.median ,
lty=2 )
lines( logpop.seq ,
lambda.PI80[1,] ,
lty=2 )
lines( logpop.seq ,
lambda.PI80[2,] ,
lty=2 )
# overlay correlations
for( i in 1:10 )
for ( j in 1:10 )
if ( i < j )
lines( c( d$logpop[i],d$logpop[j] ) ,
c( d$total_tools[i],d$total_tools[j] ) ,
lwd=2 , col=col.alpha("black",Rho[i,j]^2) )
library(rethinking)
data(milk)
d <- milk
# tidy
rm(milk)
# process
d$neocortex.prop <- d$neocortex.perc / 100
d$logmass <- log(d$mass)
# prep data
data_list <- list(
kcal = d$kcal.per.g,
neocortex = d$neocortex.prop,
logmass = d$logmass)
# model
m14.3 <- map2stan(
alist(
kcal ~ dnorm(mu,sigma),
mu <- a + bN*neocortex + bM*logmass,
neocortex ~ dnorm(nu, sigma_N),
a ~ dnorm(0,100),
c(bN, bM) ~ dnorm(0,10),
nu ~ dnorm(0.5,1),
sigma_N ~ dcauchy(0,1),
sigma ~ dcauchy(0,1)
),
data = data_list, iter = 1e4, chains = 2)
precis(m14.3, depth = 2)
dcc <- d[complete.cases(d$neocortex.prop),]
data_list_cc <- list(
kcal = dcc$kcal.per.g,
neocortex = dcc$neocortex.prop,
logmass = dcc$logmass )
m14.3cc <- map2stan(
alist(
kcal ~ dnorm(mu, sigma),
mu <- a + bN*neocortex + bM*logmass,
a ~ dnorm(0,100),
c(bN, bM) ~ dnorm(0,10),
sigma ~ dcauchy(0,1)
),
data = data_list_cc, iter = 1e4, chains = 2)
precis(m14.3, depth = 2)
precis(m14.3cc)
precis(m14.3)
m14.4 <- map2stan(
alist(
kcal ~ dnorm(mu, sigma),
mu <- a + bN*neocortex + bM*logmass,
neocortex ~ dnorm(nu, sigma_N),
nu <- a_N + gM*logmass,
a ~ dnorm(0,100),
c(bN, bM, gM) ~ dnorm(0,10),
a_N ~ dnorm(0.5, 1),
sigma_N ~ dcauchy(0,1),
sigma ~ dcauchy(0,1)
),
data = data_list, iter = 1e4, chains = 2)
save(m14.4, file = "m14.4")
save(m14.3, file = m14.3)
save(m14.3, file = "m14.3")
save(m14.3cc, file = "m14.3cc")
precis(m14.4, depth = 2)
precis(m14.4, depth = 2)
rm(list = ls())
setwd("F:/Uni/PhD/1st year/Groups/Level 4/Elle")
library(tidyverse)
#### load in data ####
load("scratch/Elle_switch_nar_data")
#### separate datasets ####
# this part is so we have a separate dataset for:
# no instructions/first half
no_inst_1 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block < 5,]
# no instructions/second half
no_inst_2 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block > 4,]
# instructions/tutorial
inst_tut <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 3,]
# instructions/task
inst_tas <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 2,]
#### Assuming we only want to look at part 2 for each participant ####
df_part2 <- switch_df[switch_df$part == 2,]
#### make plots ####
# setup data.frame/tibble for plots
# centre proportions
temp <- group_by(df_part2, participant,separation,condition)
centre_prop <- summarise(temp, prop_fixated = mean(centre))
centre_prop$box <- "centre"
# side proportions
side_prop <- summarise(temp, prop_fixated = 1 - mean(centre))
side_prop$box <- "side"
# tidy
rm(temp)
# merge data
plt_dat <- rbind(centre_prop, side_prop)
# tidy
rm(centre_prop, side_prop)
# need to add switch point data back in
temp <- group_by(df_part2, participant, condition)
switch_points <- summarise(temp, switch_point = unique(switch_point))
# tidy
rm(temp)
# now to make the plots
prop_plt <- ggplot(data = plt_dat,
aes(x = separation,
y = prop_fixated))
prop_plt <- prop_plt + geom_area(aes(colour = box,
fill = box),
position = "stack")
prop_plt <- prop_plt + geom_vline(data = switch_points,
aes(xintercept = as.numeric(switch_point)),
linetype = "dashed")
prop_plt <- prop_plt + facet_wrap(~condition + participant)
prop_plt
# save plot
# ggsave("scratch/proportions_plot.pdf", width = 10, height = 10)
#### boxplots of accuracy ####
# make boxplot data
temp <- group_by(switch_df, participant, condition)
box_dat <- summarise(temp, correct = mean(correct))
# tidy
rm(temp)
# make plots
box_plt <- ggplot(box_dat,
aes(condition,
correct))
box_plt <- box_plt + geom_boxplot()
#### compare: first half and tutorial ####
fh_tut <- rbind(inst_tut, no_inst_1)
# set data for boxplts
temp <- group_by(fh_tut,
participant,
condition)
ftut_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
ftut_box_plt <- ggplot(ftut_box_dat,
aes(condition,
correct))
ftut_box_plt <- ftut_box_plt + geom_boxplot()
#### compare: second half and task ####
sh_tas <- rbind(inst_tas, no_inst_2)
# set data for boxplts
temp <- group_by(sh_tas,
participant,
condition)
stas_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
stas_box_plt <- ggplot(stas_box_dat,
aes(condition,
correct))
stas_box_plt <- stas_box_plt + geom_boxplot()
ftut_box_plt
stas_box_plt
View(fh_tut)
View(df_part2)
