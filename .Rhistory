a <- 1
b <- 0.5
}
rt <- replicate(1,simTrial())
simDat[i,1] <- a
simDat[i,2] <- abs(rt)
simDat[i,3] = rt>0
}
simDat$a[simDat$a == 8] <- "TP"
simDat$a[simDat$a == 1] <- "TA"
plt <- ggplot(simDat, aes(x=rt, fill=response)) + geom_density(alpha=0.5) + facet_wrap(~a)
plt
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
install.packages("rstan")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
sample(1:2, 36)
sample(1:2, 36, replace = T)
sample(1:4, 32, replace = T)
sample(1:4, 32, replace = T)
flat_total <- 1200
rent_person <- 400
total_rooms <- 3
bedroom <- rent_person/total_rooms
bathroom <- rent_person/total_rooms
kitchen <- rent_person/total_rooms
real_bedroom <- bedroom
real_bathroom <- rent_person/total_people
real_kitchen <- rent_person/total_people
flat_total <- 1200
rent_person <- 400
total_rooms <- 3
total_people <- 3
bedroom <- rent_person/total_rooms
bathroom <- rent_person/total_rooms
kitchen <- rent_person/total_rooms
real_bedroom <- bedroom
real_bathroom <- rent_person/total_people
real_kitchen <- rent_person/total_people
flat_total <- 1200
rent_person <- 400
total_rooms <- 3
total_people <- 4
bedroom <- rent_person/total_rooms
bathroom <- rent_person/total_rooms
kitchen <- rent_person/total_rooms
real_bedroom <- bedroom
real_bathroom <- rent_person/total_people
real_kitchen <- rent_person/total_people
w <- real_bathroom + real_kitchen + (real_bedroom/2)
w <- real_bathroom + real_kitchen + (real_bedroom/2)
k <- w
j <- real_bathroom + real_bedroom + real_kitchen
l <- j
total <- w+k+j+l
k_owe_j <- rent_person-j
k_owe_l <- rent_person-l
k_owe_w <- rent_person-w
k_rent <- k_owe_j + k_owe_l + k_owe_w
White_pop <- 0.72
black_pop <- 0.26
white_vote_M <- 0.67
black_vote_M <- 0.04
white_vote_J <- 0.31
black_vote_J <- 0.96
M_votes <- (White_pop*white_vote_M)+(black_pop*black_vote_M)
J_votes <- (white_pop*white_vote_J)+(black_pop*black_vote_J)
white_pop <- 0.72
black_pop <- 0.26
white_vote_M <- 0.67
black_vote_M <- 0.04
white_vote_J <- 0.31
black_vote_J <- 0.96
M_votes <- (white_pop*white_vote_M)+(black_pop*black_vote_M)
J_votes <- (white_pop*white_vote_J)+(black_pop*black_vote_J)
total_days = 2
cost_per_day = 1
person_a = 2
person_b = 1
total_cost = total_days*cost_per_day
person_a_days = total_days
person_b_days = total_days - 1
all_days = person_a_days + person_b_days
a_owes = total_cost*(person_a_days/total_days)
a_owes = total_cost*(person_a_days/all_days)
b_owes = total_cost*(person_b_days/all_days)
shared_days = min(person_a_days, person_b_days)
shared_days = total_days - min(person_a_days, person_b_days)
rm(shared_days)
shared_days = total_days - min(person_a_days, person_b_days)
cost_shared_days = (shared_days/total_days)*total_cost
rm(list = ls())
total_days = 2
cost_per_day = 1
person_a = 2
person_b = 1
# The way I have done it
total_cost = total_days*cost_per_day
person_a_days = total_days
person_b_days = total_days - 1
all_days = person_a_days + person_b_days
a_owes = total_cost*(person_a_days/all_days)
b_owes = total_cost*(person_b_days/all_days)
shared_days = total_days - min(person_a_days, person_b_days)
cost_shared_days = (shared_days/total_days)*total_cost
person_a_unique_days = person_a_days-shared_days
person_b_unique_days = person_b_days-shared_days
cost_people_shared_days = cost_shared_days/lenght(c(person_a,person_b))
cost_people_shared_days = cost_shared_days/length(c(person_a,person_b))
remaining_cost = total_cost - cost_shared_days
person_a_cost = cost_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
total_days-shared_days
person_a_unique_days
remaining_cost
cost_shared_days
person_a_cost = cost_people_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost/(person_b_unique_days/(total_days-shared_days))
person_b_unique_days
total_days-shared_days
0/1
person_a_cost = cost_people_shared_days + remaining_cost*(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost*(person_b_unique_days/(total_days-shared_days))
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
rm(list = ls())
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks = (total_cost*(shared_weeks/total_weeks))/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
remaining_weeks_1 = total_weeks- shared_weeks
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
total_cost - (total_cost*(shared_weeks/total_weeks))*length(c(weeks_w, weeks_k, weeks_j, weeks_l))
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remaining_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + (total_cost - (cost_shared_weeks_pp + cost_shared_weeks_2_pp))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
# tidy
rm(cost_shared_weeks, cost_shared_weeks_2, cost_shared_weeks_2_pp, cost_shared_weeks_pp,
fst_remaining_weeks_j, fst_remaining_weeks_k, fst_remaining_weeks_l, fst_remaining_weeks_w,
remainig_cost, remaining_cost, remaining_cost_2, remaining_weeks_1, remaining_weeks_2,
shared_weeks, shared_weeks_2,
total_cost, total_weeks,
weeks_j, weeks_k, weeks_l, weeks_w)
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 2
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
#### THIS DOESN'T WORK #####
# let's work it out properly
# tidy first
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
rm(all_weeks, total_owed)
temp_w = (total_cost/4)*(10/12)
temp_l = (total_cost/4)*(10/12)
temp_k = (toal_cost/4)*(11/12)
temp_k = (total_cost/4)*(11/12)
temp_k = ((total_cost-temp_w-temp_l)/4)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)
new_cost = total_cost -temp_w - temp_l
temp_k = (new_cost/2)*0.5
temp_k = (new_cost/2)*(1/3)
temp_k = (new_cost/2)*(11/12)
temp_k = (new_cost/2)*(1/2)
(2/2)*(1/2)
temp_w2 = (total_cost)*(10/(10+10+11+12))
temp_k = (total_cost/4)*(11/12)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
# total shared weeks
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
remaining_weeks_1 = total_weeks- shared_weeks
# everyone's cost for those shared weeks
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remaining_cost = total_cost - cost_shared_weeks
# Is there a unique one left?
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
# can work out the people with only shared days now
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
# don't worry about working out those with 0
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
temp_w = (total_cost/4) * (10/12)
setwd("F:/Uni/Github/Instructed_Eye_movements")
#### Plotting Script ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script used to make plots of proportion of fixations
# made to the centre or side box(es)
#### libraries needed ####
library(tidyverse)
#### Any functions ####
# Gets Visual Degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Any constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load in data ####
load("scratch/Elle_switch_nar_data")
#### separate datasets ####
# this part is so we have a separate dataset for:
# no instructions/first half
no_inst_1 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block < 5,]
# no instructions/second half
no_inst_2 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block > 4,]
# instructions/tutorial
inst_tut <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 3,]
# instructions/task
inst_tas <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 2,]
#### Assuming we only want to look at part 2 for each participant ####
df_part2 <- switch_df[switch_df$part == 2,]
#### make plots ####
# setup data.frame/tibble for plots
# centre proportions
temp <- group_by(df_part2, participant,separation,condition)
centre_prop <- summarise(temp, prop_fixated = mean(centre))
centre_prop$box <- "centre"
# side proportions
side_prop <- summarise(temp, prop_fixated = 1 - mean(centre))
side_prop$box <- "side"
# tidy
rm(temp)
# merge data
plt_dat <- rbind(centre_prop, side_prop)
# tidy
rm(centre_prop, side_prop)
# need to add switch point data back in
temp <- group_by(df_part2, participant, condition)
switch_points <- summarise(temp, switch_point = unique(switch_point))
# tidy
rm(temp)
# now to make the plots
prop_plt <- ggplot(data = plt_dat,
aes(x = separation,
y = prop_fixated))
prop_plt <- prop_plt + geom_area(aes(colour = box,
fill = box),
position = "stack")
prop_plt <- prop_plt + geom_vline(data = switch_points,
aes(xintercept = as.numeric(switch_point)),
linetype = "dashed")
prop_plt <- prop_plt + facet_wrap(~condition + participant)
prop_plt
# save plot
# ggsave("scratch/plots/proportions_plot.pdf", width = 10, height = 10)
# dots version
side_fix_dat <- plt_dat[plt_dat$box == "side",]
dot_plt <- ggplot(side_fix_dat, aes(x = separation, y = prop_fixated))
dot_plt <- dot_plt + geom_point()
dot_plt <- dot_plt + facet_wrap(~participant, ncol = 6)
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
# tidy
rm(plt_dat, side_fix_dat)
#### Make plots for Amelia talk/publications ####
switch_df$half <- "First"
switch_df$half[switch_df$block > 4] <- "Second"
# setup new data frame
side_prop <- switch_df %>%
group_by(participant, separation, condition, half) %>%
summarise(prop_fixated = 1 - mean(centre))
# sort out line(s)
# setup separations
seps <- c(min(side_prop$separation):max(side_prop$separation))
# setup new dataframe
opt_fixations <- tibble(participant = character(),
separation = numeric(),
fix_location = numeric())
for(i in unique(switch_df$participant)){
d <- switch_df[switch_df$participant == i,]
for(x in seps){
if(x < as.numeric(unique(d$switch_point))){
fl <- 0
} else if(x > as.numeric(unique(d$switch_point))){
fl <- 1
}
opt_fixations <- rbind(opt_fixations, data.frame(participant = i,
separation = x,
fix_locations = fl))
}
}
# make plot
dot_plt <- ggplot(side_prop, aes(separation,
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(separation,
fix_locations))
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt
head(side_prop)
dot_plt <- ggplot(side_prop, aes(separation,
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(separation,
fix_locations))
dot_plt
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt
dot_plt <- ggplot(side_prop, aes(separation,
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
# need to do this before the lines I think
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(separation,
fix_locations))
dot_plt
# make plot
dot_plt <- ggplot(side_prop, aes(separation,
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
# need to do this before the lines I think
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt
opt_fixations <- tibble(participant = character(),
condition = character(),
separation = numeric(),
fix_location = numeric())
for(i in unique(switch_df$participant)){
d <- switch_df[switch_df$participant == i,]
for(x in seps){
if(x < as.numeric(unique(d$switch_point))){
fl <- 0
} else if(x > as.numeric(unique(d$switch_point))){
fl <- 1
}
opt_fixations <- rbind(opt_fixations, data.frame(participant = i,
condition = unique(d$condition),
separation = x,
fix_locations = fl))
}
}
# make plot
dot_plt <- ggplot(side_prop, aes(separation,
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
# need to do this before the lines I think
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(separation,
fix_locations))
dot_plt
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt$labels$colour <- "Half"
dot_plt
dot_plt <- ggplot(side_prop, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
# need to do this before the lines I think
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(get_VisDegs(separation/ppcm, Screen_dist),
fix_locations))
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt$labels$colour <- "Half"
dot_plt
dot_plt <- dot_plt + theme_bw()
dot_plt
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
dot_plt
seps <- seq(min(side_prop$separation):max(side_prop$separation), 0.5)
seps <- seq(min(side_prop$separation), max(side_prop$separation), 0.5)
opt_fixations <- tibble(participant = character(),
condition = character(),
separation = numeric(),
fix_location = numeric())
for(i in unique(switch_df$participant)){
d <- switch_df[switch_df$participant == i,]
for(x in seps){
if(x < as.numeric(unique(d$switch_point))){
fl <- 0
} else if(x > as.numeric(unique(d$switch_point))){
fl <- 1
}
opt_fixations <- rbind(opt_fixations, data.frame(participant = i,
condition = unique(d$condition),
separation = x,
fix_locations = fl))
}
}
# make plot
dot_plt <- ggplot(side_prop, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop_fixated,
colour = half))
dot_plt <- dot_plt + geom_point(alpha = 0.5)
dot_plt <- dot_plt + theme_bw()
dot_plt <- dot_plt + facet_wrap(~condition + participant, ncol = 6)
dot_plt <- dot_plt + geom_path(data = opt_fixations,
colour = "blue",
aes(get_VisDegs(separation/ppcm, Screen_dist),
fix_locations))
dot_plt <- dot_plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
dot_plt$labels$x <- "Delta (in Visual Degrees)"
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt$labels$colour <- "Half"
dot_plt
dir()
dir("scratch")
dir("scratch/plots")
ggsave("scratch/plots/Part_2_plots.pdf")
