}
#### Constants ####
Screen_dist <- 53
ppcm <- 1920/54
#### load in data ####
# all data
load("scratch/switch_df")
# Just accuracy data
load("scratch/Elle_acc_dat")
# fixations
load("scratch/Elle_fix_dat")
load("scratch/Elle_fix_data")
unique(Elle_accuracy_data$acc_type)
Actual <- Elle_accuracy_data[Elle_accuracy_data$acc_type == "Actual",]
Optimal <- Elle_accuracy_data[Elle_accuracy_data$acc_type == "Optimal",]
head(Actual)
plt <- ggplot(Actual, aes(offset_from_sp, Accuracy))
plt <- plt + geom_point()
plt
plt <- plt + facet_wrap(~participant)
plt
plt <- ggplot(Actual, aes(offset_from_sp, Accuracy, colour = half))
plt <- plt + geom_point()
plt <- plt + facet_wrap(~participant)
plt
View(Actual)
plt <- ggplot(Actual[Actual$half == "second"],
aes(offset_from_sp,
Accuracy))
plt <- plt + geom_point()
plt <- plt + facet_wrap(~participant)
plt
plt <- ggplot(Actual[Actual$half == "second",],
aes(offset_from_sp,
Accuracy))
plt <- plt + geom_point()
plt <- plt + facet_wrap(~participant)
plt
plt <- plt + geom_line(Optimal, aes(offset_from_sp,
Accuracy)
)
plt <- plt + geom_line(data = Optimal,
aes(offset_from_sp,
Accuracy)
)
plt
plt <- ggplot(Actual[Actual$half == "second",],
aes(offset_from_sp,
Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_line(data = Optimal,
aes(offset_from_sp,
Accuracy),
colour = "red")
plt <- plt + facet_wrap(~participant)
plt
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt
dir("scratch")
ggsave("scratch/plots/Part_2_ActVsOptAccuracy")
ggsave("scratch/plots/Part_2_ActVsOptAccuracy.png")
head(Elle_fix_data)
unique(Elle_fix_data$fix_type)
unique(Elle_fix_data$box)
Fix_Actual <- Elle_fix_data[Elle_fix_data$fix_type == "Actual",]
rm(plt, Acc_Optimal, Acc_Actual)
head(Fix_Actual)
Fix_Actual <- Elle_fix_data[Elle_fix_data$fix_type == "Actual" &
Elle_fix_data$box == "Side",]
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos))
plt <- plt + geom_line()
plt
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos),
colour = participant)
plt <- plt + geom_line()
plt
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos),
colour = as.factor(participant))
plt <- plt + geom_line()
plt
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos,
colour = as.factor(participant)))
plt <- plt + geom_line()
plt
plt <- plt + theme(legend.position="none")
plt
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt$labels$y <- "Proportion of Fixations to the side"
plt
# ggsave("scratch/plots/Part_2_ActFixProps)
ggsave("scratch/plots/Part_2_ActFixProps)
")"
)
))
")
ggsave("scratch/plots/Part_2_ActFixProps.png")
Acc_Actual <- Elle_accuracy_data[Elle_accuracy_data$acc_type == "Actual",]
Acc_Optimal <- Elle_accuracy_data[Elle_accuracy_data$acc_type == "Optimal",]
plt <- ggplot(Acc_Actual[Acc_Actual$half == "second",],
aes(offset_from_sp,
Accuracy))
plt <- plt + theme_bw()
plt <- plt + geom_point()
plt <- plt + geom_line(data = Acc_Optimal,
aes(offset_from_sp,
Accuracy),
colour = "red")
plt <- plt + facet_wrap(~participant)
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
plt
plt <- ggplot(Acc_Actual[Acc_Actual$half == "second",],
aes(offset_from_sp,
Accuracy))
plt <- plt + theme_classic()
plt <- plt + geom_point()
plt <- plt + geom_line(data = Acc_Optimal,
aes(offset_from_sp,
Accuracy),
colour = "red")
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
plt <- plt + facet_wrap(~participant)
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt
plt <- ggplot(Acc_Actual[Acc_Actual$half == "second",],
aes(offset_from_sp,
Accuracy))
plt <- plt + theme_bw()
plt <- plt + geom_point()
plt <- plt + geom_line(data = Acc_Optimal,
aes(offset_from_sp,
Accuracy),
colour = "red")
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank())
plt <- plt + facet_wrap(~participant)
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank(),
panel.border = "none")
plt
plt <- plt + theme(strip.background = element_blank(),
strip.text.x = element_blank(),
panel.border = element_blank())
plt
ggsave("scratch/plots/Part_2_ActVsOptAccuracy.png")
plt <- plt + theme_bw()
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos,
colour = as.factor(participant)))
plt <- plt + theme_bw()
plt <- plt + geom_line()
plt <- plt + theme(legend.position="none")
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt$labels$y <- "Proportion of Fixations to the side"
plt
Fix_Actual <- Elle_fix_data[Elle_fix_data$fix_type == "Actual" &
Elle_fix_data$box == "Side",]
plt <- ggplot(Fix_Actual[Fix_Actual$half == "second",],
aes(offset_from_sp,
mean_fix_pos,
colour = as.factor(participant)))
plt <- plt + theme_bw()
plt <- plt + geom_line()
plt <- plt + theme(legend.position="none",
panel.border = element_blank())
plt$labels$x <- "Offset from Switch Point (Visual Degrees)"
plt$labels$y <- "Proportion of Fixations to the side"
plt
ggsave("scratch/plots/Part_2_ActFixProps.png")
rm(list = ls())
#### Creating new datasets ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script for processing data to be analysed by Elle
# This script will produce datasets about:
# Expected accuracy had they performed optimally
# Expected accuracy based on fixation locations (to account for chance)
# Actual Accuracy accross blocks:
#    - Doesn't Alasdair's script do this one?
# Proportion of time looking at side vs centre across 9 tested distances
#    - Also by block number (first half vs second half)
#### libraries needed ####
library(tidyverse)
library(reshape2)
library(psyphy)
#### any functions ####
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Constants ####
Screen_dist <- 53
ppcm <- 1920/54
#### Extra information ####
# I think there were 36 pixels per degree... Will have to check though
pixVD = 0.036
options(digits = 4)
#### Read in part 1 measures for accuracy across distances ####
# create dataframe
df <- tibble(
block = numeric(),
separation = numeric(),
accuracy = numeric()
)
# colnames
import_names <- c(
"block",
"separation",
"accuracy"
)
# set up directory for loop
results_files <- dir("data/results/Part_1/")
# read in data
for (f in results_files){
d <- read.csv(
paste("data/results/Part_1/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# re-order
df <- select(df,
participant,
block,
separation,
accuracy)
# remove NA trials
df <- df[complete.cases(df),]
#### Calculate curve for accuracy across distances ####
sep <- c(1:450)
# data frame for accuracy accross separations
acc_sep <- tibble(
participant = character(),
separation = numeric(),
accuracy = numeric()
)
# loop through participants for accuracy over all separations
# very slow loop... must be a quicker way to do this?
# the for(i in 1:640) causes it to slow... Can do this another way?
#for (p in unique(df$participant))
#{
#  # general linear model
#  ss = df[which(df$participant==p),]
#  m = glm(data=ss, accuracy~separation, family=binomial(mafc.probit(2)))
#  for(i in 1:640){
#    y = predict(m, data.frame(separation = i), type = "response")
#
#    # add into new data frame
#    acc_sep <- rbind(acc_sep, data.frame(participant = p,
#                                         separation  = i,
#                                         accuracy = y))
#  }
#}
# participant 1 might need to be excluded
# save this
# save(acc_sep, file = "scratch/acc_sep")
# load in the above
load("scratch/acc_sep")
# tidy
# rm(m, ss, i, p, sep, y)
# tidy if loop not run
rm(sep)
#### Part 1 plots ####
# remove NA's
df_nar <- df[complete.cases(df),]
# summary data for mean accuracy
temp <- group_by(df_nar, participant, separation)
agdat <- summarise(temp, meanAcc = mean(accuracy))
# tidy
rm(temp)
# make plot
plt = ggplot(df_nar, aes(x=separation, y=accuracy))
plt = plt + stat_smooth(colour="black", method=glm, method.args = list(family=binomial(mafc.probit(2))), se=F, fullrange=TRUE)
plt = plt + geom_point(data=agdat, aes(x=separation, y=meanAcc))
plt = plt + facet_wrap(~participant) + theme_minimal()
plt = plt + scale_y_continuous(name="proportion correct", breaks=c(0.25, 0.5, 0.75, 1.0))
plt = plt + scale_x_continuous(name="separation (pixels for now)", limits=c(0,450), breaks=c(0,150,300,450))
# ggsave("scratch/plots/Part_1_Plots.pdf", height = 10, width = 10)
# or as png?
# ggsave("scratch/plots/Part_1_Plots.png")
# tidy
rm(plt, agdat)
#### part 2 data ####
# lod in part 2 data with switch points
load("scratch/Elle_switch_nar_data")
# add in expected accuracy column given separation
switch_df <- merge(acc_sep, switch_df, by = c("participant", "separation"))
# reorder
switch_df <- select(switch_df,
participant,
part,
block,
separation,
fixated_box,
correct,
switch_point,
condition,
centre,
accuracy)
# probably want to round switch_point
switch_df$switch_point <- as.numeric(switch_df$switch_point)
switch_df$switch_point <- round(switch_df$switch_point)
# check switch points against accuracy
temp <- group_by(switch_df, participant, separation)
temp <- summarise(temp, mean_acc = mean(accuracy))
switch_points <- group_by(switch_df, participant)
switch_points <- summarise(switch_points, switch_point = unique(switch_point))
temp <- merge(temp, switch_points)
# tidy
rm(temp)
# NB: as.factor() then as.numeric() will produce a number for each level
#     Use this to transform data so it's standardised accross participants
#     order of levels is important though so be careful
#     might need to reorder the levels before you do this
#     Though there seem to be nine levels for each participant, not 7?
#### Standardise separations ####
for(i in unique(switch_df$participant)){
switch_df$standard_sep[switch_df$participant == i] <- as.numeric(as.factor(switch_df$separation[switch_df$participant == i]))
}
# subtract 5 to centre the switch point
switch_df$standard_sep <- switch_df$standard_sep - 5
#tidy
rm(i)
#### NOTE: this is wrong ####
# 0 needs to be switch point not just the middle of the separations tested at
temp <- switch_df
new_sep_dat <- tibble(participant = character(),
separation = numeric(),
as_numbers = numeric(), #Standardised
as_factors = character(), # Standardised as factors
offset_from_sp = numeric()) # Offset from switch_point in VD
for(p in unique(temp$participant)){
a <- -3
sp <- unique(temp$switch_point[temp$participant == p])
for(s in sort(unique(temp$separation[temp$participant == p]))){
if(s == 284){
new_sep <- a - 0.5
new_sep2 <- as.factor(s)
} else if(s == 640) {
new_sep <- a
new_sep2 <- as.factor(s)
} else {
new_sep <- a
new_sep2 <- as.factor(new_sep)
a <- a + 1
}
new_sep3 <- get_VisDegs((s - sp)/ppcm,Screen_dist)
new_sep_dat <- rbind(new_sep_dat, data.frame(participant = p,
separation = s,
as_numbers = new_sep,
as_factors = new_sep2,
offset_from_sp = new_sep3))
}
}
# tidy
rm(a, p, s, new_sep, new_sep2, new_sep3, sp, temp)
# save this so it can be merged in other scripts etc.
save(new_sep_dat, file = "scratch/new_slabs_dat")
# add this data into the switch_df we have
switch_df <- merge(switch_df, new_sep_dat)
#### column for accuracy given fixation location ####
# gives accuracy given where they looked based on separation
switch_df$act_acc <- switch_df$accuracy
switch_df$act_acc[switch_df$centre == 0] <- 0.75
#### make column for optimal accuracy ####
# first make opt fixation location
switch_df$opt_fix <- 0
# # this way gives some people opt accuracy below 0.75, may need to redefine their accuracy?
# switch_df$opt_fix[switch_df$separation > switch_df$switch_point] <- 1
# This way should work
switch_df$opt_fix[switch_df$accuracy > 0.75] <- 1
# now give accuracy if they had followed this strategy
switch_df$opt_acc <- switch_df$accuracy
switch_df$opt_acc[switch_df$opt_fix == 0] <- 0.75
# Now get Expected Accuracy
switch_df$exp_acc <- switch_df$accuracy
switch_df$exp_acc[switch_df$centre == 0] <- 0.75
#### Accuracy: make new datasets ####
# first, set first half vs second half
switch_df$half[switch_df$block < 5] <- "first"
switch_df$half[switch_df$block > 4] <- "second"
# save this
save(switch_df, file = "scratch/switch_df")
#### Accuracy: Actual ####
# sort out actual accuracy
temp <- group_by(switch_df, participant, half, as_numbers, as_factors, offset_from_sp, condition)
Act_accuracy <- summarise(temp, mean_acc = mean(correct))
# define type of accuracy
Act_accuracy$acc_type <- "Actual"
# change column names
colnames(Act_accuracy) <- c("participant",
"half",
"as_numbers",
"as_factors",
"offset_from_sp",
"condition",
"Accuracy",
"acc_type")
#### Accuracy: Optimal ####
# Add in optimal accuracy
Opt_accuracy <- summarise(temp, mean_opt = mean(opt_acc))
# define type of accuracy
Opt_accuracy$acc_type <- "Optimal"
# change column names
colnames(Opt_accuracy) <- c("participant",
"half",
"as_numbers",
"as_factors",
"offset_from_sp",
"condition",
"Accuracy",
"acc_type")
#### Accuracy: Expected Actual ####
# sort expected actual accuracy
Exp_accuracy <- summarise(temp, mean_exp = mean(exp_acc))
# define type of accuracy
Exp_accuracy$acc_type <- "Expected"
# change column names
colnames(Exp_accuracy) <- c("participant",
"half",
"as_numbers",
"as_factors",
"offset_from_sp",
"condition",
"Accuracy",
"acc_type")
# tidy
rm(temp)
#
#### Accuracy: Combine these? ####
Elle_accuracy_data <- rbind(Exp_accuracy, Opt_accuracy, Act_accuracy)
save(Elle_accuracy_data, file = "scratch/Elle_acc_dat")
# make .txt file
write(Elle_accuracy_data, file = "scratch/Accuracy_file")
write(Elle_accuracy_data, file = "scratch/Accuracy_file.txt")
View(Elle_accuracy_data)
write(Elle_accuracy_data, file = "scratch/Accuracy_file.txt", sep = "\t")
write(Elle_accuracy_data, file = "scratch/Accuracy_file", sep = "\t")
write.table(Elle_accuracy_data, file = "scratch/Accuracy_file.txt", sep = "\t")
temp <- group_by(switch_df, participant, half, as_numbers, as_factors, offset_from_sp, condition)
Act_fixation_pos_centre <- summarise(temp, mean_fix_pos = mean(centre))
# add box column
Act_fixation_pos_centre$box <- "Centre"
# side
Act_fixation_pos_side <- summarise(temp, mean_fix_pos = 1 - mean(centre))
# add box column
Act_fixation_pos_side$box <- "Side"
# combine the two
Act_fixation_pos <- rbind(Act_fixation_pos_centre, Act_fixation_pos_side)
# define type of fixation_pos
Act_fixation_pos$fix_type <- "Actual"
# sort order
# Act_fixation_pos <- select(Act_fixation_pos,
#                            participant,
#                            condition,
#                            half,
#                            standard_sep,
#                            fix_type,
#                            box,
#                            mean_fix_pos)
# Optimal
# Get proportions
# centre
temp <- group_by(switch_df, participant, half, as_numbers, as_factors, offset_from_sp, condition)
Opt_fixation_pos_centre <- summarise(temp, mean_fix_pos = mean(opt_fix))
# add box column
Opt_fixation_pos_centre$box <- "Centre"
# side
Opt_fixation_pos_side <- summarise(temp, mean_fix_pos = 1 - mean(opt_fix))
# add box column
Opt_fixation_pos_side$box <- "Side"
# combine the two
Opt_fixation_pos <- rbind(Opt_fixation_pos_centre, Opt_fixation_pos_side)
# define type of fixation_pos
Opt_fixation_pos$fix_type <- "Optimal"
# tidy
rm(temp)
# sort out the order
# Opt_fixation_pos <- select(Opt_fixation_pos,
#                            participant,
#                            condition,
#                            half,
#                            standard_sep,
#                            fix_type,
#                            box,
#                            mean_fix_pos)
#### Fixations: make datasets combined ####
Elle_fix_data <- rbind(Opt_fixation_pos, Act_fixation_pos)
# save this
save(Elle_fix_data, file = "scratch/Elle_fix_data")
write.table(Elle_fix_data, file = "scratch/Fixation_file.txt", sep = "\t")
