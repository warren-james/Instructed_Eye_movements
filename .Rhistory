# Make side vs centre first
# Think this is right, check the script though
# 1 = left, 2 = middle, 3 = right
switch_df$centre <- 0
switch_df$centre[switch_df$fixated_box == 2] <- 1
#### save the file (everything) ####
save(switch_df, file = "scratch/Elle_switch_data")
#### Create version with Na's removed ####
switch_df <- switch_df[complete.cases(switch_df),]
# create save files
save(switch_df, file = "scratch/Elle_switch_nar_data")
View(switch_df)
setwd("F:/Uni/Github/Instructed_Eye_movements")
#### libraries needed ####
library(tidyverse)
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
correct = numeric())
# create column names for the data we have
import_names <- c(
"block",
"separation",
"fixated_box",
"correct")
# set up directory for loop
results_files <- dir("data/results/Part_2-3/")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2-3/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
d$part <- substring(temp[4],5,5)
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(temp, f, d, import_names, results_files)
# re-order the dataset
df <- select(df,
participant,
part,
block,
separation,
fixated_box,
correct)
# save processed data file
save(df, file = "scratch/Elle_data")
# tidy
rm(df)
rm(switch_df)
#### libraries needed ####
library(tidyverse)
library(R.matlab)
# load in the data set
load("scratch/Elle_data")
# create a tibble for switch points
switch_df <- tibble(
participant = numeric(),
switch_point = numeric()
)
results_files <- dir("data/switching_points/")
# add in a counter to assign the row
count <- 1
# read in the Matlab data
#temp <- readMat("data/switching_points/0_99.mat")
for (f in results_files){
d <- readMat(
paste("data/switching_points/", f, sep=""))
# get switch point
d <- d$switchdist[1]
# get parts of the string for part no.
temp <- strsplit(f, '[_.]')[[1]]
# now input this information
switch_df[count,] <- c(temp[2], d)
# increas the count
count <- count + 1
}
# tidy
rm(count, d, f, temp, results_files)
# combine the datasets
switch_df <- merge(df, switch_df, by="participant")
# tidy
rm(df)
#### add in condition part ####
# Turn "part" numeric for the loop
switch_df$part <- as.numeric(switch_df$part)
for(i in unique(switch_df$participant)){
if(mean(switch_df$part[switch_df$participant == i]) > 2)
{
switch_df$condition[switch_df$participant == i] <- "Instructions"
} else {
switch_df$condition[switch_df$participant == i] <- "No_instructions"
}
}
#tidy
rm(i)
#### Create column for whether they made the optimal choice or not ####
# Make side vs centre first
# Think this is right, check the script though
# 1 = left, 2 = middle, 3 = right
switch_df$centre <- 0
switch_df$centre[switch_df$fixated_box == 2] <- 1
#### save the file (everything) ####
save(switch_df, file = "scratch/Elle_switch_data")
#### Create version with Na's removed ####
switch_df <- switch_df[complete.cases(switch_df),]
# create save files
save(switch_df, file = "scratch/Elle_switch_nar_data")
rm(switch_df)
#### Plotting Script ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script used to make plots of proportion of fixations
# made to the centre or side box(es)
#### libraries needed ####
library(tidyverse)
#### load in data ####
load("scratch/Elle_switch_nar_data")
#### separate datasets ####
# this part is so we have a separate dataset for:
# no instructions/first half
no_inst_1 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block < 5,]
# no instructions/second half
no_inst_2 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block > 4,]
# instructions/tutorial
inst_tut <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 3,]
# instructions/task
inst_tas <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 2,]
#### Assuming we only want to look at part 2 for each participant ####
df_part2 <- switch_df[switch_df$part == 2,]
#### make plots ####
# setup data.frame/tibble for plots
# centre proportions
temp <- group_by(df_part2, participant,separation,condition)
centre_prop <- summarise(temp, prop_fixated = mean(centre))
centre_prop$box <- "centre"
# side proportions
side_prop <- summarise(temp, prop_fixated = 1 - mean(centre))
side_prop$box <- "side"
# tidy
rm(temp)
# merge data
plt_dat <- rbind(centre_prop, side_prop)
# tidy
rm(centre_prop, side_prop)
# need to add switch point data back in
temp <- group_by(df_part2, participant, condition)
switch_points <- summarise(temp, switch_point = unique(switch_point))
# tidy
rm(temp)
# now to make the plots
prop_plt <- ggplot(data = plt_dat,
aes(x = separation,
y = prop_fixated))
prop_plt <- prop_plt + geom_area(aes(colour = box,
fill = box),
position = "stack")
prop_plt <- prop_plt + geom_vline(data = switch_points,
aes(xintercept = as.numeric(switch_point)),
linetype = "dashed")
prop_plt <- prop_plt + facet_wrap(~condition + participant)
prop_plt
# save plot
# ggsave("scratch/proportions_plot.pdf", width = 10, height = 10)
#### boxplots of accuracy ####
# make boxplot data
temp <- group_by(switch_df, participant, condition)
box_dat <- summarise(temp, correct = mean(correct))
# tidy
rm(temp)
# make plots
box_plt <- ggplot(box_dat,
aes(condition,
correct))
box_plt <- box_plt + geom_boxplot()
#### compare: first half and tutorial ####
fh_tut <- rbind(inst_tut, no_inst_1)
# set data for boxplts
temp <- group_by(fh_tut,
participant,
condition)
ftut_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
ftut_box_plt <- ggplot(ftut_box_dat,
aes(condition,
correct))
ftut_box_plt <- ftut_box_plt + geom_boxplot()
#### compare: second half and task ####
sh_tas <- rbind(inst_tas, no_inst_2)
# set data for boxplts
temp <- group_by(sh_tas,
participant,
condition)
stas_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
stas_box_plt <- ggplot(stas_box_dat,
aes(condition,
correct))
stas_box_plt <- stas_box_plt + geom_boxplot()
ftut_box_plt
stas_box_plt
rm(list = ls())
setwd("E:/Github/Instructed_Eye_movements")
#### Plotting Script ####
# Level 4 Thesis by Elle
# 2017/18
# Written by Warren James
# Script used to make plots of proportion of fixations
# made to the centre or side box(es)
#### libraries needed ####
library(tidyverse)
#### load in data ####
load("scratch/Elle_switch_nar_data")
#### separate datasets ####
# this part is so we have a separate dataset for:
# no instructions/first half
no_inst_1 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block < 5,]
# no instructions/second half
no_inst_2 <- switch_df[switch_df$condition == "No_instructions" &
switch_df$block > 4,]
# instructions/tutorial
inst_tut <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 3,]
# instructions/task
inst_tas <- switch_df[switch_df$condition == "Instructions" &
switch_df$part == 2,]
#### Assuming we only want to look at part 2 for each participant ####
df_part2 <- switch_df[switch_df$part == 2,]
#### make plots ####
# setup data.frame/tibble for plots
# centre proportions
temp <- group_by(df_part2, participant,separation,condition)
centre_prop <- summarise(temp, prop_fixated = mean(centre))
centre_prop$box <- "centre"
# side proportions
side_prop <- summarise(temp, prop_fixated = 1 - mean(centre))
side_prop$box <- "side"
# tidy
rm(temp)
# merge data
plt_dat <- rbind(centre_prop, side_prop)
# tidy
rm(centre_prop, side_prop)
# need to add switch point data back in
temp <- group_by(df_part2, participant, condition)
switch_points <- summarise(temp, switch_point = unique(switch_point))
# tidy
rm(temp)
# now to make the plots
prop_plt <- ggplot(data = plt_dat,
aes(x = separation,
y = prop_fixated))
prop_plt <- prop_plt + geom_area(aes(colour = box,
fill = box),
position = "stack")
prop_plt <- prop_plt + geom_vline(data = switch_points,
aes(xintercept = as.numeric(switch_point)),
linetype = "dashed")
prop_plt <- prop_plt + facet_wrap(~condition + participant)
prop_plt
# save plot
# ggsave("scratch/proportions_plot.pdf", width = 10, height = 10)
#### boxplots of accuracy ####
# make boxplot data
temp <- group_by(switch_df, participant, condition)
box_dat <- summarise(temp, correct = mean(correct))
# tidy
rm(temp)
# make plots
box_plt <- ggplot(box_dat,
aes(condition,
correct))
box_plt <- box_plt + geom_boxplot()
#### compare: first half and tutorial ####
fh_tut <- rbind(inst_tut, no_inst_1)
# set data for boxplts
temp <- group_by(fh_tut,
participant,
condition)
ftut_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
ftut_box_plt <- ggplot(ftut_box_dat,
aes(condition,
correct))
ftut_box_plt <- ftut_box_plt + geom_boxplot()
#### compare: second half and task ####
sh_tas <- rbind(inst_tas, no_inst_2)
# set data for boxplts
temp <- group_by(sh_tas,
participant,
condition)
stas_box_dat <- summarise(temp,
correct = mean(correct))
# tidy
rm(temp)
# make plots
stas_box_plt <- ggplot(stas_box_dat,
aes(condition,
correct))
stas_box_plt <- stas_box_plt + geom_boxplot()
ggsave("scratch/proportions_plot.pdf", width = 10, height = 10)
rm(list = ls())
library(tidyverse)
library(rethinking)
library(ggthemes)
fit_model <- function(df) {
m <- map2stan(
alist(
correct ~ dbinom(1, p),
logit(p) <- a + a_p[participant] + b1 * given_instruction + b2 * second_set + bi * given_instruction * second_set,
a ~ dnorm(0, 1),
b1 ~ dnorm(0, 1),
b2 ~ dnorm(0, 1),
bi ~ dnorm(0, 1),
a_p[participant] ~ dnorm(0, sigma_p),
sigma_p ~ dcauchy(0, 1)),
data = df)
return(m)
}
plot_indiv <- function(df, m, fname) {
# extract things from model
# first, we get each person's fit
pred_data <- list(
participant = rep(1:length(unique(df$participant)), each = 2),
given_instruction =   rep(c(0, 1), length(unique(df$participant))))
mu <- link(m, data = pred_data)
mu.PI <- apply(mu, 2, PI)
pred_data$lower <- mu.PI[1,]
pred_data$upper <- mu.PI[2,]
pred_data$condition <- ifelse(
pred_data$given_instruction == 1, "Instructions", "No_instructions")
pred_data <- as.data.frame(pred_data)
#  now we get the fixed effects
# plot what we got!
acc_df <- aggregate(data = df, correct ~ participant + condition, "mean")
plt <- ggplot(x = as.numeric(acc_df$participant))
plt <- plt + geom_point(data = acc_df, aes(x = participant, y = correct, colour = condition))
# add model details!
plt <- plt + geom_errorbar(data = pred_data, aes(x = participant, ymin = lower, ymax = upper, colour = condition))
# format nicely
plt <- plt + theme_solarized()  + scale_colour_solarized("blue")
plt <- plt + scale_y_continuous(limits = c(0,1), expand = c(0,0), breaks = c(0, 0.5, 1))
plt
ggsave(fname)
}
plot_fix_ef <- function(m, fname) {
# plot effect of Instructions
post <- extract.samples(m)
fx <- tibble(
condition = rep(c("No_instructions", "Instructions", "Difference"), each = length(post$a)),
samples = c(logistic(post$a), logistic(post$a + post$b),  logistic(post$a + post$b) - logistic(post$a)) )
plt <- ggplot(fx, aes(x = samples, fill = condition))
plt <- plt + geom_density(alpha = 0.5)
plt <- plt + theme_solarized()  + scale_fill_solarized("blue")
plt <- plt + scale_x_continuous(
name = "probablity of correctly responding to target", limits = c(-0.2,1), expand = c(0,0))
ggsave(fname)
}
# load in the data set
load("scratch/Elle_switch_nar_data")
df <- switch_df
rm(switch_df)
#  tidy up
df$switch_point <- as.numeric(df$switch_point)
df$given_instruction <- as.numeric(df$condition == "Instructions")
df$second_set <- ifelse(df$block > 4, 1, 0)
# take part 2 for the main comparison
temp <- df[df$second_set == 1]
temp <- df[df$second_set == 1,]
unique(df$block[df$participant == "1"])
rm(list = ls())
#### libraries needed ####
library(tidyverse)
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
correct = numeric())
# create column names for the data we have
import_names <- c(
"block",
"separation",
"fixated_box",
"correct")
# set up directory for loop
results_files <- dir("data/results/Part_2-3/")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2-3/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
d$part <- substring(temp[4],5,5)
# bind to df
df <- bind_rows(df, d)
}
rm(temp, f, d, import_names, results_files)
# re-order the dataset
df <- select(df,
participant,
part,
block,
separation,
fixated_box,
correct)
save(df, file = "scratch/Elle_data")
rm(df)
library(R.matlab)
load("scratch/Elle_data")
unique(df$block[df$participant == "1"])
rm(list = ls())
library(tidyverse)
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
correct = numeric())
# create column names for the data we have
import_names <- c(
"block",
"separation",
"fixated_box",
"correct")
# set up directory for loop
results_files <- dir("data/results/Part_2-3/")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2-3/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
d$part <- substring(temp[4],5,5)
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(temp, f, d, import_names, results_files)
# re-order the dataset
df <- select(df,
participant,
part,
block,
separation,
fixated_box,
correct)
# save processed data file
save(df, file = "scratch/Elle_data")
unique(df$block[df$participant == "1"])
df <- tibble(
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
correct = numeric())
# create column names for the data we have
import_names <- c(
"block",
"separation",
"fixated_box",
"correct")
# set up directory for loop
results_files <- dir("data/results/Part_2-3/")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2-3/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
d$participant <- temp[2]
d$part <- substring(temp[4],5,5)
# bind to df
df <- bind_rows(df, d)
}
unique(df$block[df$participant == "1"])
